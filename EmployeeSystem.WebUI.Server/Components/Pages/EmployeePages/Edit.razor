@page "/employees/edit"

@using Microsoft.EntityFrameworkCore
@using EmployeeSystem.Domain.Entities
@using EmployeeSystem.Application.Services
@inject IDbContextFactory<EmployeeSystem.Infrastructure.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject DepartmentService DepartmentService
@rendermode InteractiveServer

<PageTitle>Edit Employee</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Edit Employee</MudText>

    @if (Employee is null)
    {
        <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary">Loading...</MudText>
    }
    else
    {
        <MudCard>
            <MudCardContent>
                <EditForm Model="Employee" FormName="Edit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Employee No" @bind-Value="Employee.EmployeeNo" Required="true" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Label="Employee Name" @bind-Value="Employee.EmployeeName" Required="true" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudSelect Label="Gender" @bind-Value="Employee.Gender" Required="true">
                                @foreach (var gender in Enum.GetValues(typeof(Gender)).Cast<Gender>())
                                {
                                    <MudSelectItem Value="@gender">@gender.ToString()</MudSelectItem>
                                }
                            </MudSelect>

                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Label="Email" @bind-Value="Employee.Email" Required="true" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Label="Contact No" @bind-Value="Employee.ContactNo" Required="true" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField Label="Address" @bind-Value="Employee.EmployeeAddress" Required="true" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Label="Position" @bind-Value="Employee.Position" Required="true" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudSelect Label="Department" @bind-Value="Employee.DepartmentId" Required="true">
                                @foreach (var dept in Departments)
                                {
                                    <MudSelectItem Value="@dept.DepartmentId">@dept.DepartmentName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateEmployee" Type="submit" Class="mt-4">Save</MudButton>
                </EditForm>
            </MudCardContent>
        </MudCard>
    }

    <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/employees" Class="mt-4">Back to List</MudButton>
</MudContainer>

@code {
    [SupplyParameterFromQuery]
    public int EmployeeId { get; set; }

    [SupplyParameterFromForm]
    public Employee? Employee { get; set; }
    public IEnumerable<Department> Departments { get; set; } = new List<Department>();

    protected override async Task OnInitializedAsync()
    {
        Departments = await DepartmentService.GetAllDepartmentsAsync();

        Employee = await EmployeeService.GetEmployeeByIdAsync(EmployeeId);

        if (Employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateEmployee()
    {
        var success = await EmployeeService.UpdateEmployeeAsync(Employee);

        if (!success)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            NavigationManager.NavigateTo("/employees");
        }
    }

}
