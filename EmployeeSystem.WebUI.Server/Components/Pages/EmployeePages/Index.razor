@page "/employees"
    
@using Microsoft.EntityFrameworkCore
@using EmployeeSystem.Domain.Entities
@using EmployeeSystem.Application.Services
@inject IDbContextFactory<EmployeeSystem.Infrastructure.Data.ApplicationDbContext> DbFactory
@inject EmployeeService EmployeeService

<PageTitle>Index</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mb-4">
    <MudText Typo="Typo.h3" Align="Align.Center">Employee Management</MudText>
    <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary">
        Manage and view employee details efficiently.
    </MudText>
</MudContainer>

<p>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" href="employees/create">Create New </MudButton>
</p>

<MudTable Items="@employees" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Employee,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Employees List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Employee No</MudTh>
        <MudTh>Employee Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Department</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="EmpNo">@context.EmployeeNo</MudTd>
        <MudTd DataLabel="EmpName">@context.EmployeeName</MudTd>
        <MudTd DataLabel="Position">@context.Position</MudTd>
        <MudTd DataLabel="DeptName">@context.Department.DepartmentName</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"employees/edit?employeeid={context.EmployeeId}")">
                Edit
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Info" Href="@($"employees/details?employeeid={context.EmployeeId}")">
                Details
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Error" Href="@($"employees/delete?employeeid={context.EmployeeId}")">
                Delete
            </MudButton>
        </MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected: @selectedItem1?.EmployeeName</MudText>
    </div>
</div>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Employee selectedItem1 = null;
    private HashSet<Employee> selectedItems = new HashSet<Employee>();

    private IEnumerable<Employee> employees = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetAllEmployeesAsync();
    }

    private bool FilterFunc1(Employee employee) => FilterFunc(employee, searchString1);

    private bool FilterFunc(Employee employee, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (employee.EmployeeNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (employee.EmployeeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (employee.Position.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (employee.Department.DepartmentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}
