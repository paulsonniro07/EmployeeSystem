@page "/employees/delete"

@using Microsoft.EntityFrameworkCore
@using EmployeeSystem.Domain.Entities
@using EmployeeSystem.Application.Services
@inject IDbContextFactory<EmployeeSystem.Infrastructure.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject DepartmentService DepartmentService
@rendermode InteractiveServer

<PageTitle>Delete</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Delete Employee</MudText>

    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Are you sure you want to delete this?</MudText>
            @if (employee is null)
            {
                <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary">Loading...</MudText>
            }
            else
            {
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Employee Name" Value="@employee.EmployeeName" ReadOnly="true" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField Label="Position" Value="@employee.Position" ReadOnly="true" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField Label="Department" Value="@employee.Department.DepartmentName" ReadOnly="true" />
                    </MudItem>
                </MudGrid>
                <EditForm Model="employee" FormName="delete" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteEmployee" Class="mt-4" Disabled="@(employee is null)">
                        Delete
                    </MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/employees" Class="mt-4">
                        Back to List
                    </MudButton>
                </EditForm>
            }
        </MudCardContent>
    </MudCard>


</MudContainer>

@code {
    Employee? employee;

    [SupplyParameterFromQuery]
    public int EmployeeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        employee = await EmployeeService.GetEmployeeByIdAsync(EmployeeId);

        if (employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteEmployee()
    {
        var success = await EmployeeService.DeleteEmployeeAsync(employee);

        if (!success)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            NavigationManager.NavigateTo("/employees");
        }
    }
}
