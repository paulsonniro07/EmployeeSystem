@page "/attendances/delete"

@using Microsoft.EntityFrameworkCore
@using EmployeeSystem.Domain.Entities
@using EmployeeSystem.Application.Services
@inject IDbContextFactory<EmployeeSystem.Infrastructure.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AttendanceService AttendanceService

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Delete Attendance</MudText>
    <div>
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Are you sure you want to delete this?</MudText>
                @if (attendance is null)
                {
                    <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary">Loading...</MudText>
                }
                else
                {
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Attendance No" Value="@attendance.AttendanceNo" ReadOnly="true" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Label="Attendance Date" Value="@attendance.AttendanceDate" ReadOnly="true" />
                        </MudItem>

                    </MudGrid>
                    <EditForm Model="attendance" FormName="delete" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteAttendance" Class="mt-4" Disabled="@(attendance is null)">
                            Delete
                        </MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/attendances" Class="mt-4">
                            Back to List
                        </MudButton>
                    </EditForm>
                }
            </MudCardContent>
        </MudCard>

    </div>

</MudContainer>
@code {

    [SupplyParameterFromQuery]
    public int AttendanceId { get; set; }

    [SupplyParameterFromForm]
    public Attendance? attendance { get; set; }

    protected override async Task OnInitializedAsync()
    {
        attendance = await AttendanceService.GetAttendanceByIdAsync(AttendanceId);

        if (attendance is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteAttendance()
    {
        var success = await AttendanceService.DeleteAttendanceAsync(attendance);

        if (!success)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            NavigationManager.NavigateTo("/attendances");
        }
    }
}
