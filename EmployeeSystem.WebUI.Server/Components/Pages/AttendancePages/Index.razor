@page "/attendances"

@using MudBlazor
@using EmployeeSystem.Domain.Entities
@using EmployeeSystem.Application.Services
@inject AttendanceService AttendanceService

<PageTitle>Departments</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mb-4">
    <MudText Typo="Typo.h3" Align="Align.Center">Attendance Overview</MudText>
    <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary">
        View and manage all Attendances details here.
    </MudText>
</MudContainer>

<p>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="attendances/create">
        Create New
    </MudButton>
</p>


<MudTable Items="@attendances" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Attendance,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Attendance List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Attendance No</MudTh>
        <MudTh>Attendance Date</MudTh>
        <MudTh>Created Date</MudTh>
        <MudTh>Modified Date</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="AttendanceNo">@context.AttendanceNo</MudTd>
        <MudTd DataLabel="AttendanceDate">@(context.AttendanceDate?.ToString("yyyy/MM/dd") ?? "N/A")</MudTd>
        <MudTd DataLabel="CreatedDate">@(context.CreatedDate?.ToString("yyyy/MM/dd") ?? "N/A")</MudTd>
        <MudTd DataLabel="ModifiedDate">@(context.ModifiedDate?.ToString("yyyy/MM/dd") ?? "N/A")</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"attendances/edit?attendanceid={context.AttendanceId}")">
                Edit
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Info" Href="@($"attendances/details?attendanceid={context.AttendanceId}")">
                Details
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Error" Href="@($"attendances/delete?attendanceid={context.AttendanceId}")">
                Delete
            </MudButton>
        </MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected: @selectedItem1?.AttendanceNo</MudText>
    </div>
</div>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Attendance selectedItem1 = null;
    private HashSet<Attendance> selectedItems = new HashSet<Attendance>();

    private IEnumerable<Attendance> attendances = new List<Attendance>();

    protected override async Task OnInitializedAsync()
    {
        attendances = await AttendanceService.GetAllAttendancesAsync();
    }

    private bool FilterFunc1(Attendance attendance) => FilterFunc(attendance, searchString1);

    private bool FilterFunc(Attendance attendance, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (attendance.AttendanceNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
