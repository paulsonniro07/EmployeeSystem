@page "/attendances/create"

@using Microsoft.EntityFrameworkCore
@using EmployeeSystem.Domain.Entities
@using EmployeeSystem.Application.Services
@using EmployeeSystem.WebUI.Server.Components.Pages.AttendancePages.EmployeeAttendancePages
@inject IDbContextFactory<EmployeeSystem.Infrastructure.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AttendanceService AttendanceService
@inject EmployeeService EmployeeService
@inject IDialogService DialogService
@rendermode InteractiveServer
@inject ISnackbar Snackbar

<PageTitle>Create Attendance</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Create Attendance</MudText>

    <MudCard>
        <MudCardContent>
            <EditForm Model="attendance" FormName="create">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Attendance No" @bind-Value="attendance.AttendanceNo" Required="true" />
                        <ValidationMessage For="() => attendance.AttendanceNo" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Attendance Date" @bind-Date="attendance.AttendanceDate" DateFormat="yyyy/MM/dd" Required="true" />
                        <ValidationMessage For="() => attendance.AttendanceDate" />
                    </MudItem>
                </MudGrid>

                <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-4">Employee Attendance</MudText>
                <MudTable Items="employeeAttendances" Class="mt-4">
                    <HeaderContent>
                        <MudTh>Employee</MudTh>
                        <MudTh>Present</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="ea">
                        <MudTd>@ea.Employee.EmployeeName</MudTd>
                        <MudTd>@ea.AttendanceStatus</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => RemoveEmployeeAttendance(ea))">Remove</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddEmployeeAttendanceDialog" Class="mt-4">Add Employee Attendance</MudButton>

            </EditForm>
        </MudCardContent>
    </MudCard>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddAttendance" Type="submit" Class="mt-4">
        Create
    </MudButton>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/attendances" Class="mt-4">
        Back to List
    </MudButton>
</MudContainer>

@code {
    [SupplyParameterFromForm]
    public Attendance attendance { get; set; } = new();

    public List<EmployeeAttendance> employeeAttendances { get; set; } = new();
    public List<Employee> employees { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        employees = (await EmployeeService.GetAllEmployeesAsync()).ToList();
    }

    public async Task OpenAddEmployeeAttendanceDialog()
    {
        var parameters = new DialogParameters
            {
                ["Employees"] = employees
            };

        var dialog = await DialogService.ShowAsync<AddEmployeeAttendanceDialog>("Add Employee Attendance", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is EmployeeAttendance employeeAttendance)
        {
            // Check for duplicate employee attendance
            if (employeeAttendances.Any(ea => ea.EmployeeId == employeeAttendance.EmployeeId))
            {
                Snackbar.Add("This employee attendance already exists.", Severity.Error);
            }
            else
            {
                await AttendanceService.AddEmployeeAttendanceAsync(employeeAttendance);
                employeeAttendances.Add(employeeAttendance);
            }
        }
    }

    public void RemoveEmployeeAttendance(EmployeeAttendance employeeAttendance)
    {
        employeeAttendances.Remove(employeeAttendance);
    }

    public async Task AddAttendance()
    {
        // Ensure the EmployeeAttendances property is set before saving.
        attendance.EmployeeAttendances = employeeAttendances;

        if (attendance.AttendanceId == 0)
        {
            await AttendanceService.AddAttendanceAsync(attendance);
        }
        else
        {
            await AttendanceService.UpdateAttendanceAsync(attendance);
        }
        NavigationManager.NavigateTo("/attendances");
    }
}
